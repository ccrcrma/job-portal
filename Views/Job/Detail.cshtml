@model Job
@inject UserManager<ApplicationUser> _userManager
@{
    Layout = "/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Detail";
    var partialVm = new JobLinkViewModel();
    partialVm.Title = Model.Title;
    partialVm.LinkUrl = Context.Request.GetDisplayUrl();
}
@await Html.PartialAsync("_MailModalPartial", partialVm)
<!-- job post company Start -->
<div class="container my-5">
    <div class="job-post-company">
        <div class="row justify-content-between">
            <!-- Left Content -->
            <div class="col-xl-7 col-lg-8">
                <!-- job single -->
                <div class="single-job-items mb-50" style="background-color:#F8F8F8;">
                    <div class="job-items">
                        <div class="company-img company-img-details">
                            <a href="#"><img src="~/@Model.Company.GetBrandImagePath" alt="@Model.Company.Name" class="company-logo"></a>
                        </div>
                        <div class="job-tittle">
                            <a href="#">
                                <h4>@Model.Title</h4>
                            </a>
                            <ul>
                                <li>@Model.Company.Name</li>
                                <li><i class="fas fa-map-marker-alt"></i>@Model.Location</li>
                                <li>@Model.GetFormattedSalary</li>
                            </ul>
                        </div>
                    </div>
                </div>
                <!-- job single End -->

            <div class="job-post-details">
                <div class="post-details1 mb-50">
                    <!-- Small Section Tittle -->
                    <div class="small-section-tittle d-flex vertical-align-middle">
                        <h4>Job Description</h4>
                        <a data-toggle="modal" data-target="#email-modal" class="d-block ml-auto"><i
                                class="fas fa-envelope text-success" style="font-size: 1.5rem;"></i></a>
                    </div>
                    <p>@Model.Description</p>
                </div>
                <div class="post-details2  mb-50">
                    <!-- Small Section Tittle -->
                    <div class="small-section-tittle">
                        <h4>Required Knowledge, Skills, and Abilities</h4>
                    </div>
                    <ul>
                        <li>System Software Development</li>
                        <li>Mobile Applicationin iOS/Android/Tizen or other platform</li>
                        <li>Research and code , libraries, APIs and frameworks</li>
                        <li>Strong knowledge on software development life cycle</li>
                        <li>Strong problem solving and debugging skills</li>
                    </ul>
                </div>
                <div class="post-details2  mb-50">
                    <!-- Small Section Tittle -->
                    <div class="small-section-tittle">
                        <h4>Education + Experience</h4>
                    </div>
                    <ul>
                        <li>3 or more years of professional design experience</li>
                        <li>Direct response email experience</li>
                        <li>Ecommerce website design experience</li>
                        <li>Familiarity with mobile and web apps preferred</li>
                        <li>Experience using Invision a plus</li>
                    </ul>
                </div>
            </div>

            </div>
            <!-- Right Content -->
            <div class="col-xl-4 col-lg-4">
                <div class="post-details3  mb-50">
                    <!-- Small Section Tittle -->
                    <div class="small-section-tittle">
                        <h4>Job Overview</h4>
                    </div>
                    <ul>
                        <li>Posted date : <span>@Model.CreatedOn.GetHumanFriendlyDate()</span></li>
                        <li>Location : <span>@Model.Location</span></li>
                        <li>Vacancy : <span>@Model.Vacancy</span></li>
                        <li>Job nature : <span>@Model.Type.GetDisplayName()</span></li>
                        <li>Salary : <span>@Model.GetFormattedSalary</span></li>
                        <li>Deadline : <span>@Model.Deadline.GetHumanFriendlyDate()</span></li>
                    </ul>
                    <div class="actions d-flex flex-column">
                        <a asp-action="Detail" 
                            asp-controller="Company" 
                            asp-area="Employer" 
                            asp-route-id="@Model.Company.Name.Hyphenate()"  
                            class="btn bg-warning">Visit Company Page</a>

                        @if (User.Identity.IsAuthenticated)
                        {
                            <div id="apply-for-job">
                                @if((await _userManager.FindByUsersAsync(User)).IsApplied(Model.Id)){
                                    <span  class="w-100 mb-2 d-block p-2 text-center text-white" style="background-color: #218e3aa3;">Applied To Job!!!</span>
                                }else
                                {
                                    <form id="apply-form"
                                        asp-action="ApplyJob"
                                        asp-controller="Seeker" 
                                        asp-area="Seeker" 
                                        data-ajax="true"
                                        data-ajax-complete="applyRequestCallback"
                                        class="mb-2"> 
                                        <input type="hidden" name="jobId" value="@Model.Id">
                                        <button type="submit" class="btn bg-success w-100">Apply Now</button>
                                    </form>
                                }
                            </div>
                            @if((await _userManager.FindByUsersAsync(User)).IsSaved(Model.Id))
                            {
                                <form asp-action="UnsaveJob" data-action-type-save asp-controller="Seeker" asp-area="Seeker">
                                    <input type="hidden" name="jobId" value="@Model.Id">
                                    <button type="submit" name="save-unsave-button" class="btn bg-danger w-100">UnSave Job</button>
                                </form>
                            }else
                            {
                                <form asp-action="SaveJob" asp-controller="Seeker" asp-area="Seeker" data-action-type-save>
                                    <input type="hidden" name="jobId" value="@Model.Id">
                                    <button type="submit" name="save-unsave-button" class="btn bg-secondary w-100">Save Job</button>
                                </form>
                            }
                            
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- job post company End -->


@section Scripts{
    <partial name="_AjaxPartial"></partial>
    <script>
        function applyRequestCallback(xhr){
            switch(xhr.status){
                case 200:
                    const {message} = xhr.responseJSON;
                    var applyForm = document.getElementById("apply-form")
                    var parentNode = applyForm.parentNode;
                    @* console.dir(parentNode.innerHTML); *@
                    var successSpan = document.createElement("span");
                    successSpan.classList.add("w-100",  "mb-2" ,"d-block" ,"p-2" ,"text-center", "text-white");
                    successSpan.style.backgroundColor = "#218e3aa3";
                    successSpan.innerHTML = "Applied To Job!!!";
                    parentNode.removeChild(applyForm)
                    parentNode.prepend(successSpan);
                    @* console.dir(parentNode.innerHTML); *@
                break;
            }
        }
        async function SaveUnsaveJob(url, data){
            var response = await fetch(url, {body: data,method: "POST"})
                body =  await response.json();
                status = response.status
                return {body,status}
        }
        var saveUnsaveForm = document.querySelector("form[data-action-type-save]");
        if(saveUnsaveForm){
            saveUnsaveForm.onsubmit = async function(event){
                event.preventDefault();
                var url = event.target.getAttribute("action");
                var data = new FormData(event.target);
                var response = await SaveUnsaveJob(url,data);

                if(response.status == 200){
                    const {url,alertMessage,text} = response.body;
                    saveUnsaveForm.setAttribute("action", url);
                    var saveUnsaveButton = document.querySelector("button[name='save-unsave-button']");
                    saveUnsaveButton.innerHTML = text;
                    saveUnsaveButton.classList.toggle("bg-danger");
                    saveUnsaveButton.classList.toggle("bg-secondary");
                    var alertWrapper = document.querySelector(".alert-wrapper");
                    if(alertWrapper !=null){
                        alertWrapper.parentNode.removeChild(alertWrapper);
                    }
                    alertWrapper = document.createElement("div");
                    alertWrapper.classList.add("alert-wrapper");
                    var alertType = saveUnsaveButton.classList.contains("bg-danger") ? "alert-success": "alert-danger";
                    alertWrapper.innerHTML = `
                    <div class="alert alert-success ${alertType} fade show" role="alert">
                        <strong>Holy guacamole!</strong> ${alertMessage}.
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"> &times;</button>
                    </div>`
                    var alertContainer = document.querySelector("main .container")
                    alertContainer.insertBefore(alertWrapper, alertContainer.firstChild);
                }

            }
        }
    </script>
}